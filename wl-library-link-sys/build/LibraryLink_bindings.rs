/* automatically generated by rust-bindgen */

pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 101500;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const _JBLEN: u32 = 37;
pub const WolframLibraryVersion: u32 = 6;
pub const __WORDSIZE: u32 = 64;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const True: u32 = 1;
pub const False: u32 = 0;
pub const MType_Integer: u32 = 2;
pub const MType_Real: u32 = 3;
pub const MType_Complex: u32 = 4;
pub const WolframCompileLibraryVersion: u32 = 1;
pub type jmp_buf = [::std::os::raw::c_int; 37usize];
pub type sigjmp_buf = [::std::os::raw::c_int; 38usize];
extern "C" {
    pub fn setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn sigsetjmp(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn siglongjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn longjmperror();
}
pub type size_t = ::std::os::raw::c_ulong;
pub type rsize_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = u128;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type mint = i64;
pub type umint = u64;
pub type mbool = ::std::os::raw::c_int;
pub type mreal = f64;
pub type type_t = ::std::os::raw::c_int;
pub type errcode_t = ::std::os::raw::c_int;
pub type UBIT32 = u32;
pub type UBIT64 = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mcomplex {
    pub ri: [mreal; 2usize],
}
#[test]
fn bindgen_test_layout_mcomplex() {
    assert_eq!(
        ::std::mem::size_of::<mcomplex>(),
        16usize,
        concat!("Size of: ", stringify!(mcomplex))
    );
    assert_eq!(
        ::std::mem::align_of::<mcomplex>(),
        8usize,
        concat!("Alignment of ", stringify!(mcomplex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcomplex>())).ri as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mcomplex),
            "::",
            stringify!(ri)
        )
    );
}
pub type MTensor = *mut st_MNumericArray;
pub type MRawArray = *mut st_MNumericArray;
pub type MNumericArray = *mut st_MNumericArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MSparseArray_struct {
    _unused: [u8; 0],
}
pub type MSparseArray = *mut MSparseArray_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMAGEOBJ_ENTRY {
    _unused: [u8; 0],
}
pub type MImage = *mut IMAGEOBJ_ENTRY;
#[repr(C)]
#[derive(Copy, Clone)]
pub union MArgument {
    pub boolean: *mut mbool,
    pub integer: *mut mint,
    pub real: *mut mreal,
    pub cmplex: *mut mcomplex,
    pub tensor: *mut MTensor,
    pub sparse: *mut MSparseArray,
    pub numeric: *mut MNumericArray,
    pub image: *mut MImage,
    pub utf8string: *mut *mut ::std::os::raw::c_char,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_MArgument() {
    assert_eq!(
        ::std::mem::size_of::<MArgument>(),
        8usize,
        concat!("Size of: ", stringify!(MArgument))
    );
    assert_eq!(
        ::std::mem::align_of::<MArgument>(),
        8usize,
        concat!("Alignment of ", stringify!(MArgument))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MArgument>())).boolean as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MArgument),
            "::",
            stringify!(boolean)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MArgument>())).integer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MArgument),
            "::",
            stringify!(integer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MArgument>())).real as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MArgument),
            "::",
            stringify!(real)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MArgument>())).cmplex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MArgument),
            "::",
            stringify!(cmplex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MArgument>())).tensor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MArgument),
            "::",
            stringify!(tensor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MArgument>())).sparse as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MArgument),
            "::",
            stringify!(sparse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MArgument>())).numeric as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MArgument),
            "::",
            stringify!(numeric)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MArgument>())).image as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MArgument),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MArgument>())).utf8string as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MArgument),
            "::",
            stringify!(utf8string)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MLink {
    _unused: [u8; 0],
}
pub type MLINK = *mut MLink;
pub type WSLINK = *mut MLink;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ml_environment {
    _unused: [u8; 0],
}
pub type MLENV = *mut ml_environment;
pub type MLEnvironment = MLENV;
pub type WSENV = *mut ml_environment;
pub type WSEnvironment = WSENV;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_MInputStream {
    _unused: [u8; 0],
}
pub type MInputStream = *mut st_MInputStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_MOutputStream {
    _unused: [u8; 0],
}
pub type MOutputStream = *mut st_MOutputStream;
pub const LIBRARY_NO_ERROR: _bindgen_ty_1 = 0;
pub const LIBRARY_TYPE_ERROR: _bindgen_ty_1 = 1;
pub const LIBRARY_RANK_ERROR: _bindgen_ty_1 = 2;
pub const LIBRARY_DIMENSION_ERROR: _bindgen_ty_1 = 3;
pub const LIBRARY_NUMERICAL_ERROR: _bindgen_ty_1 = 4;
pub const LIBRARY_MEMORY_ERROR: _bindgen_ty_1 = 5;
pub const LIBRARY_FUNCTION_ERROR: _bindgen_ty_1 = 6;
pub const LIBRARY_VERSION_ERROR: _bindgen_ty_1 = 7;
pub type _bindgen_ty_1 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_DataStore {
    _unused: [u8; 0],
}
pub type DataStore = *mut st_DataStore;
pub type WolframLibraryData = *mut st_WolframLibraryData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_WolframLibraryData {
    pub UTF8String_disown:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_char)>,
    pub MTensor_new: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: mint,
            arg2: mint,
            arg3: *const mint,
            arg4: *mut MTensor,
        ) -> ::std::os::raw::c_int,
    >,
    pub MTensor_free: ::std::option::Option<unsafe extern "C" fn(arg1: MTensor)>,
    pub MTensor_clone: ::std::option::Option<
        unsafe extern "C" fn(arg1: MTensor, arg2: *mut MTensor) -> ::std::os::raw::c_int,
    >,
    pub MTensor_shareCount:
        ::std::option::Option<unsafe extern "C" fn(arg1: MTensor) -> mint>,
    pub MTensor_disown: ::std::option::Option<unsafe extern "C" fn(arg1: MTensor)>,
    pub MTensor_disownAll: ::std::option::Option<unsafe extern "C" fn(arg1: MTensor)>,
    pub MTensor_setInteger: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: MTensor,
            arg2: *mut mint,
            arg3: mint,
        ) -> ::std::os::raw::c_int,
    >,
    pub MTensor_setReal: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: MTensor,
            arg2: *mut mint,
            arg3: mreal,
        ) -> ::std::os::raw::c_int,
    >,
    pub MTensor_setComplex: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: MTensor,
            arg2: *mut mint,
            arg3: mcomplex,
        ) -> ::std::os::raw::c_int,
    >,
    pub MTensor_setMTensor: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: MTensor,
            arg2: MTensor,
            arg3: *mut mint,
            arg4: mint,
        ) -> ::std::os::raw::c_int,
    >,
    pub MTensor_getInteger: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: MTensor,
            arg2: *mut mint,
            arg3: *mut mint,
        ) -> ::std::os::raw::c_int,
    >,
    pub MTensor_getReal: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: MTensor,
            arg2: *mut mint,
            arg3: *mut mreal,
        ) -> ::std::os::raw::c_int,
    >,
    pub MTensor_getComplex: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: MTensor,
            arg2: *mut mint,
            arg3: *mut mcomplex,
        ) -> ::std::os::raw::c_int,
    >,
    pub MTensor_getMTensor: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: MTensor,
            arg2: *mut mint,
            arg3: mint,
            arg4: *mut MTensor,
        ) -> ::std::os::raw::c_int,
    >,
    pub MTensor_getRank:
        ::std::option::Option<unsafe extern "C" fn(arg1: MTensor) -> mint>,
    pub MTensor_getDimensions:
        ::std::option::Option<unsafe extern "C" fn(arg1: MTensor) -> *const mint>,
    pub MTensor_getType:
        ::std::option::Option<unsafe extern "C" fn(arg1: MTensor) -> mint>,
    pub MTensor_getFlattenedLength:
        ::std::option::Option<unsafe extern "C" fn(arg1: MTensor) -> mint>,
    pub MTensor_getIntegerData:
        ::std::option::Option<unsafe extern "C" fn(arg1: MTensor) -> *mut mint>,
    pub MTensor_getRealData:
        ::std::option::Option<unsafe extern "C" fn(arg1: MTensor) -> *mut mreal>,
    pub MTensor_getComplexData:
        ::std::option::Option<unsafe extern "C" fn(arg1: MTensor) -> *mut mcomplex>,
    pub Message:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char)>,
    pub AbortQ: ::std::option::Option<unsafe extern "C" fn() -> mint>,
    pub getWSLINK:
        ::std::option::Option<unsafe extern "C" fn(arg1: WolframLibraryData) -> WSLINK>,
    pub processWSLINK: ::std::option::Option<
        unsafe extern "C" fn(arg1: WSLINK) -> ::std::os::raw::c_int,
    >,
    pub evaluateExpression: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: WolframLibraryData,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
            arg4: mint,
            arg5: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub runtimeData: *mut st_WolframRuntimeData,
    pub compileLibraryFunctions: *mut st_WolframCompileLibrary_Functions,
    pub VersionNumber: mint,
    pub registerInputStreamMethod: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            ctor: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: MInputStream,
                    msgHead: *const ::std::os::raw::c_char,
                    optionsIn: *mut ::std::os::raw::c_void,
                ),
            >,
            handlerTest: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                    arg2: *mut ::std::os::raw::c_char,
                ) -> mbool,
            >,
            methodData: *mut ::std::os::raw::c_void,
            destroyMethod: ::std::option::Option<
                unsafe extern "C" fn(methodData: *mut ::std::os::raw::c_void),
            >,
        ) -> mbool,
    >,
    pub unregisterInputStreamMethod: ::std::option::Option<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> mbool,
    >,
    pub registerOutputStreamMethod: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            ctor: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: MOutputStream,
                    msgHead: *const ::std::os::raw::c_char,
                    optionsIn: *mut ::std::os::raw::c_void,
                    appendMode: mbool,
                ),
            >,
            handlerTest: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                    arg2: *mut ::std::os::raw::c_char,
                ) -> mbool,
            >,
            methodData: *mut ::std::os::raw::c_void,
            destroyMethod: ::std::option::Option<
                unsafe extern "C" fn(methodData: *mut ::std::os::raw::c_void),
            >,
        ) -> mbool,
    >,
    pub unregisterOutputStreamMethod: ::std::option::Option<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> mbool,
    >,
    pub ioLibraryFunctions: *mut st_WolframIOLibrary_Functions,
    pub getWSLINKEnvironment:
        ::std::option::Option<unsafe extern "C" fn(arg1: WolframLibraryData) -> WSENV>,
    pub sparseLibraryFunctions: *mut st_WolframSparseLibrary_Functions,
    pub imageLibraryFunctions: *mut st_WolframImageLibrary_Functions,
    pub registerLibraryExpressionManager: ::std::option::Option<
        unsafe extern "C" fn(
            mname: *const ::std::os::raw::c_char,
            mfun: ::std::option::Option<
                unsafe extern "C" fn(arg1: WolframLibraryData, arg2: mbool, arg3: mint),
            >,
        ) -> ::std::os::raw::c_int,
    >,
    pub unregisterLibraryExpressionManager: ::std::option::Option<
        unsafe extern "C" fn(
            mname: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub releaseManagedLibraryExpression: ::std::option::Option<
        unsafe extern "C" fn(
            mname: *const ::std::os::raw::c_char,
            id: mint,
        ) -> ::std::os::raw::c_int,
    >,
    pub registerLibraryCallbackManager: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            mfun: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: WolframLibraryData,
                    arg2: mint,
                    arg3: MTensor,
                ) -> mbool,
            >,
        ) -> ::std::os::raw::c_int,
    >,
    pub unregisterLibraryCallbackManager: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub callLibraryCallbackFunction: ::std::option::Option<
        unsafe extern "C" fn(
            id: mint,
            ArgC: mint,
            Args: *mut MArgument,
            Res: MArgument,
        ) -> ::std::os::raw::c_int,
    >,
    pub releaseLibraryCallbackFunction:
        ::std::option::Option<unsafe extern "C" fn(id: mint) -> ::std::os::raw::c_int>,
    pub validatePath: ::std::option::Option<
        unsafe extern "C" fn(
            path: *mut ::std::os::raw::c_char,
            type_: ::std::os::raw::c_char,
        ) -> mbool,
    >,
    pub protectedModeQ: ::std::option::Option<unsafe extern "C" fn() -> mbool>,
    pub rawarrayLibraryFunctions: *mut st_WolframRawArrayLibrary_Functions,
    pub numericarrayLibraryFunctions: *mut st_WolframNumericArrayLibrary_Functions,
    pub setParallelThreadNumber: ::std::option::Option<
        unsafe extern "C" fn(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int,
    >,
    pub restoreParallelThreadNumber:
        ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub getParallelThreadNumber:
        ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout_st_WolframLibraryData() {
    assert_eq!(
        ::std::mem::size_of::<st_WolframLibraryData>(),
        416usize,
        concat!("Size of: ", stringify!(st_WolframLibraryData))
    );
    assert_eq!(
        ::std::mem::align_of::<st_WolframLibraryData>(),
        8usize,
        concat!("Alignment of ", stringify!(st_WolframLibraryData))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).UTF8String_disown
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(UTF8String_disown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_new as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_new)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_free as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_free)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_clone as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_clone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_shareCount
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_shareCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_disown as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_disown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_disownAll
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_disownAll)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_setInteger
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_setInteger)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_setReal as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_setReal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_setComplex
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_setComplex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_setMTensor
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_setMTensor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_getInteger
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_getInteger)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_getReal as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_getReal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_getComplex
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_getComplex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_getMTensor
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_getMTensor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_getRank as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_getRank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_getDimensions
                as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_getDimensions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_getType as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_getType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_getFlattenedLength
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_getFlattenedLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_getIntegerData
                as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_getIntegerData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_getRealData
                as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_getRealData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_getComplexData
                as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_getComplexData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).Message as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(Message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).AbortQ as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(AbortQ)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).getWSLINK as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(getWSLINK)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).processWSLINK as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(processWSLINK)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).evaluateExpression
                as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(evaluateExpression)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).runtimeData as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(runtimeData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).compileLibraryFunctions
                as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(compileLibraryFunctions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).VersionNumber as *const _
                as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(VersionNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).registerInputStreamMethod
                as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(registerInputStreamMethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).unregisterInputStreamMethod
                as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(unregisterInputStreamMethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).registerOutputStreamMethod
                as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(registerOutputStreamMethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).unregisterOutputStreamMethod
                as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(unregisterOutputStreamMethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).ioLibraryFunctions
                as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(ioLibraryFunctions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).getWSLINKEnvironment
                as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(getWSLINKEnvironment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).sparseLibraryFunctions
                as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(sparseLibraryFunctions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).imageLibraryFunctions
                as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(imageLibraryFunctions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>()))
                .registerLibraryExpressionManager as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(registerLibraryExpressionManager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>()))
                .unregisterLibraryExpressionManager as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(unregisterLibraryExpressionManager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>()))
                .releaseManagedLibraryExpression as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(releaseManagedLibraryExpression)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>()))
                .registerLibraryCallbackManager as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(registerLibraryCallbackManager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>()))
                .unregisterLibraryCallbackManager as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(unregisterLibraryCallbackManager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).callLibraryCallbackFunction
                as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(callLibraryCallbackFunction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>()))
                .releaseLibraryCallbackFunction as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(releaseLibraryCallbackFunction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).validatePath as *const _
                as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(validatePath)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).protectedModeQ as *const _
                as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(protectedModeQ)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).rawarrayLibraryFunctions
                as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(rawarrayLibraryFunctions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).numericarrayLibraryFunctions
                as *const _ as usize
        },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(numericarrayLibraryFunctions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).setParallelThreadNumber
                as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(setParallelThreadNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).restoreParallelThreadNumber
                as *const _ as usize
        },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(restoreParallelThreadNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).getParallelThreadNumber
                as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(getParallelThreadNumber)
        )
    );
}
pub const MNumericArray_Data_Type_MNumericArray_Type_Undef: MNumericArray_Data_Type = 0;
pub const MNumericArray_Data_Type_MNumericArray_Type_Bit8: MNumericArray_Data_Type = 1;
pub const MNumericArray_Data_Type_MNumericArray_Type_UBit8: MNumericArray_Data_Type = 2;
pub const MNumericArray_Data_Type_MNumericArray_Type_Bit16: MNumericArray_Data_Type = 3;
pub const MNumericArray_Data_Type_MNumericArray_Type_UBit16: MNumericArray_Data_Type = 4;
pub const MNumericArray_Data_Type_MNumericArray_Type_Bit32: MNumericArray_Data_Type = 5;
pub const MNumericArray_Data_Type_MNumericArray_Type_UBit32: MNumericArray_Data_Type = 6;
pub const MNumericArray_Data_Type_MNumericArray_Type_Bit64: MNumericArray_Data_Type = 7;
pub const MNumericArray_Data_Type_MNumericArray_Type_UBit64: MNumericArray_Data_Type = 8;
pub const MNumericArray_Data_Type_MNumericArray_Type_Real32: MNumericArray_Data_Type = 9;
pub const MNumericArray_Data_Type_MNumericArray_Type_Real64: MNumericArray_Data_Type = 10;
pub const MNumericArray_Data_Type_MNumericArray_Type_Complex_Real32:
    MNumericArray_Data_Type = 11;
pub const MNumericArray_Data_Type_MNumericArray_Type_Complex_Real64:
    MNumericArray_Data_Type = 12;
pub type MNumericArray_Data_Type = u32;
pub use self::MNumericArray_Data_Type as numericarray_data_t;
pub const MNumericArray_Convert_Method_MNumericArray_Convert_Check:
    MNumericArray_Convert_Method = 1;
pub const MNumericArray_Convert_Method_MNumericArray_Convert_Clip_Check:
    MNumericArray_Convert_Method = 2;
pub const MNumericArray_Convert_Method_MNumericArray_Convert_Coerce:
    MNumericArray_Convert_Method = 3;
pub const MNumericArray_Convert_Method_MNumericArray_Convert_Clip_Coerce:
    MNumericArray_Convert_Method = 4;
pub const MNumericArray_Convert_Method_MNumericArray_Convert_Round:
    MNumericArray_Convert_Method = 5;
pub const MNumericArray_Convert_Method_MNumericArray_Convert_Clip_Round:
    MNumericArray_Convert_Method = 6;
pub const MNumericArray_Convert_Method_MNumericArray_Convert_Scale:
    MNumericArray_Convert_Method = 7;
pub const MNumericArray_Convert_Method_MNumericArray_Convert_Clip_Scale:
    MNumericArray_Convert_Method = 8;
pub type MNumericArray_Convert_Method = u32;
pub use self::MNumericArray_Convert_Method as numericarray_convert_method_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_WolframNumericArrayLibrary_Functions {
    pub MNumericArray_new: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: numericarray_data_t,
            arg2: mint,
            arg3: *const mint,
            arg4: *mut MNumericArray,
        ) -> errcode_t,
    >,
    pub MNumericArray_free:
        ::std::option::Option<unsafe extern "C" fn(arg1: MNumericArray)>,
    pub MNumericArray_clone: ::std::option::Option<
        unsafe extern "C" fn(arg1: MNumericArray, arg2: *mut MNumericArray) -> errcode_t,
    >,
    pub MNumericArray_disown:
        ::std::option::Option<unsafe extern "C" fn(arg1: MNumericArray)>,
    pub MNumericArray_disownAll:
        ::std::option::Option<unsafe extern "C" fn(arg1: MNumericArray)>,
    pub MNumericArray_shareCount:
        ::std::option::Option<unsafe extern "C" fn(arg1: MNumericArray) -> mint>,
    pub MNumericArray_getType: ::std::option::Option<
        unsafe extern "C" fn(arg1: MNumericArray) -> numericarray_data_t,
    >,
    pub MNumericArray_getRank:
        ::std::option::Option<unsafe extern "C" fn(arg1: MNumericArray) -> mint>,
    pub MNumericArray_getDimensions:
        ::std::option::Option<unsafe extern "C" fn(arg1: MNumericArray) -> *const mint>,
    pub MNumericArray_getFlattenedLength:
        ::std::option::Option<unsafe extern "C" fn(arg1: MNumericArray) -> mint>,
    pub MNumericArray_getData: ::std::option::Option<
        unsafe extern "C" fn(arg1: MNumericArray) -> *mut ::std::os::raw::c_void,
    >,
    pub MNumericArray_convertType: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut MNumericArray,
            arg2: MNumericArray,
            arg3: numericarray_data_t,
            arg4: numericarray_convert_method_t,
            arg5: mreal,
        ) -> errcode_t,
    >,
}
#[test]
fn bindgen_test_layout_st_WolframNumericArrayLibrary_Functions() {
    assert_eq!(
        ::std::mem::size_of::<st_WolframNumericArrayLibrary_Functions>(),
        96usize,
        concat!(
            "Size of: ",
            stringify!(st_WolframNumericArrayLibrary_Functions)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<st_WolframNumericArrayLibrary_Functions>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(st_WolframNumericArrayLibrary_Functions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframNumericArrayLibrary_Functions>()))
                .MNumericArray_new as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframNumericArrayLibrary_Functions),
            "::",
            stringify!(MNumericArray_new)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframNumericArrayLibrary_Functions>()))
                .MNumericArray_free as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframNumericArrayLibrary_Functions),
            "::",
            stringify!(MNumericArray_free)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframNumericArrayLibrary_Functions>()))
                .MNumericArray_clone as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframNumericArrayLibrary_Functions),
            "::",
            stringify!(MNumericArray_clone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframNumericArrayLibrary_Functions>()))
                .MNumericArray_disown as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframNumericArrayLibrary_Functions),
            "::",
            stringify!(MNumericArray_disown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframNumericArrayLibrary_Functions>()))
                .MNumericArray_disownAll as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframNumericArrayLibrary_Functions),
            "::",
            stringify!(MNumericArray_disownAll)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframNumericArrayLibrary_Functions>()))
                .MNumericArray_shareCount as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframNumericArrayLibrary_Functions),
            "::",
            stringify!(MNumericArray_shareCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframNumericArrayLibrary_Functions>()))
                .MNumericArray_getType as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframNumericArrayLibrary_Functions),
            "::",
            stringify!(MNumericArray_getType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframNumericArrayLibrary_Functions>()))
                .MNumericArray_getRank as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframNumericArrayLibrary_Functions),
            "::",
            stringify!(MNumericArray_getRank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframNumericArrayLibrary_Functions>()))
                .MNumericArray_getDimensions as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframNumericArrayLibrary_Functions),
            "::",
            stringify!(MNumericArray_getDimensions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframNumericArrayLibrary_Functions>()))
                .MNumericArray_getFlattenedLength as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframNumericArrayLibrary_Functions),
            "::",
            stringify!(MNumericArray_getFlattenedLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframNumericArrayLibrary_Functions>()))
                .MNumericArray_getData as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframNumericArrayLibrary_Functions),
            "::",
            stringify!(MNumericArray_getData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframNumericArrayLibrary_Functions>()))
                .MNumericArray_convertType as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframNumericArrayLibrary_Functions),
            "::",
            stringify!(MNumericArray_convertType)
        )
    );
}
pub type WolframNumericArrayLibrary_Functions =
    *mut st_WolframNumericArrayLibrary_Functions;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_MNumericArray {
    pub prec: mreal,
    pub dims: *mut mint,
    pub rank: mint,
    pub tensor_property_type: type_t,
    pub flags: UBIT32,
    pub data_type: type_t,
    pub nelems: mint,
    pub data: *mut ::std::os::raw::c_void,
    pub refcount: umint,
}
#[test]
fn bindgen_test_layout_st_MNumericArray() {
    assert_eq!(
        ::std::mem::size_of::<st_MNumericArray>(),
        64usize,
        concat!("Size of: ", stringify!(st_MNumericArray))
    );
    assert_eq!(
        ::std::mem::align_of::<st_MNumericArray>(),
        8usize,
        concat!("Alignment of ", stringify!(st_MNumericArray))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_MNumericArray>())).prec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_MNumericArray),
            "::",
            stringify!(prec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_MNumericArray>())).dims as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_MNumericArray),
            "::",
            stringify!(dims)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_MNumericArray>())).rank as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_MNumericArray),
            "::",
            stringify!(rank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_MNumericArray>())).tensor_property_type as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(st_MNumericArray),
            "::",
            stringify!(tensor_property_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_MNumericArray>())).flags as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(st_MNumericArray),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_MNumericArray>())).data_type as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(st_MNumericArray),
            "::",
            stringify!(data_type)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_MNumericArray>())).nelems as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(st_MNumericArray),
            "::",
            stringify!(nelems)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<st_MNumericArray>())).data as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(st_MNumericArray),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_MNumericArray>())).refcount as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(st_MNumericArray),
            "::",
            stringify!(refcount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct M_TENSOR_INITIALIZATION_DATA_STRUCT {
    pub tensors: *mut MTensor,
    pub n: mint,
    pub in_use: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_M_TENSOR_INITIALIZATION_DATA_STRUCT() {
    assert_eq!(
        ::std::mem::size_of::<M_TENSOR_INITIALIZATION_DATA_STRUCT>(),
        24usize,
        concat!("Size of: ", stringify!(M_TENSOR_INITIALIZATION_DATA_STRUCT))
    );
    assert_eq!(
        ::std::mem::align_of::<M_TENSOR_INITIALIZATION_DATA_STRUCT>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(M_TENSOR_INITIALIZATION_DATA_STRUCT)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<M_TENSOR_INITIALIZATION_DATA_STRUCT>())).tensors
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(M_TENSOR_INITIALIZATION_DATA_STRUCT),
            "::",
            stringify!(tensors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<M_TENSOR_INITIALIZATION_DATA_STRUCT>())).n as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(M_TENSOR_INITIALIZATION_DATA_STRUCT),
            "::",
            stringify!(n)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<M_TENSOR_INITIALIZATION_DATA_STRUCT>())).in_use
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(M_TENSOR_INITIALIZATION_DATA_STRUCT),
            "::",
            stringify!(in_use)
        )
    );
}
pub type MTensorInitializationData = *mut M_TENSOR_INITIALIZATION_DATA_STRUCT;
pub type WolframRuntimeData = *mut st_WolframRuntimeData;
pub type LibraryFunctionPointer = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: WolframLibraryData,
        arg2: mint,
        arg3: *mut MArgument,
        arg4: MArgument,
    ) -> ::std::os::raw::c_int,
>;
pub type UnaryMathFunctionPointer = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: mint,
        arg4: *const mint,
        arg5: ::std::os::raw::c_uint,
    ) -> mint,
>;
pub type BinaryMathFunctionPointer = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_void,
        arg4: mint,
        arg5: *const mint,
        arg6: ::std::os::raw::c_uint,
    ) -> mint,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_WolframCompileLibrary_Functions {
    pub VersionNumber: mint,
    pub GetInitializedMTensors: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut st_WolframLibraryData,
            arg2: mint,
        ) -> MTensorInitializationData,
    >,
    pub ReleaseInitializedMTensors:
        ::std::option::Option<unsafe extern "C" fn(arg1: MTensorInitializationData)>,
    pub WolframLibraryData_cleanUp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut st_WolframLibraryData,
            arg2: ::std::os::raw::c_int,
        ),
    >,
    pub MTensor_init: ::std::option::Option<unsafe extern "C" fn() -> MTensor>,
    pub MTensor_allocate: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut MTensor,
            arg2: ::std::os::raw::c_int,
            arg3: mint,
            arg4: *mut mint,
        ) -> ::std::os::raw::c_int,
    >,
    pub MTensor_copy: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut MTensor, arg2: MTensor) -> ::std::os::raw::c_int,
    >,
    pub MTensor_copyUnique: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut MTensor, arg2: MTensor) -> ::std::os::raw::c_int,
    >,
    pub MTensor_insertMTensor: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: MTensor,
            arg2: MTensor,
            arg3: *mut mint,
        ) -> ::std::os::raw::c_int,
    >,
    pub MTensor_getMTensorInitialized: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut MTensor,
            arg2: MTensor,
            arg3: *mut mint,
            arg4: mint,
        ) -> ::std::os::raw::c_int,
    >,
    pub MTensor_getPart: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut MTensor,
            arg2: MTensor,
            arg3: mint,
            arg4: *mut ::std::os::raw::c_int,
            arg5: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub MTensor_setPart: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut MTensor,
            arg2: MTensor,
            arg3: mint,
            arg4: *mut ::std::os::raw::c_int,
            arg5: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub getUnaryMathFunction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
        ) -> UnaryMathFunctionPointer,
    >,
    pub Math_T_T: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_uint,
            arg3: MTensor,
            arg4: ::std::os::raw::c_int,
            arg5: *mut MTensor,
        ) -> ::std::os::raw::c_int,
    >,
    pub Math_V_V: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_uint,
            arg3: ::std::os::raw::c_int,
            arg4: *mut ::std::os::raw::c_void,
            arg5: ::std::os::raw::c_int,
            arg6: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub getBinaryMathFunction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
        ) -> BinaryMathFunctionPointer,
    >,
    pub Math_TT_T: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_uint,
            arg3: MTensor,
            arg4: MTensor,
            arg5: ::std::os::raw::c_int,
            arg6: *mut MTensor,
        ) -> ::std::os::raw::c_int,
    >,
    pub Math_VV_V: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_uint,
            arg3: ::std::os::raw::c_int,
            arg4: *mut ::std::os::raw::c_void,
            arg5: ::std::os::raw::c_int,
            arg6: *mut ::std::os::raw::c_void,
            arg7: ::std::os::raw::c_int,
            arg8: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub Compare_R: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: mreal,
            arg3: mint,
            arg4: *mut mreal,
        ) -> mbool,
    >,
    pub Compare_C: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: mreal,
            arg3: mint,
            arg4: *mut mcomplex,
            arg5: *mut mbool,
        ) -> ::std::os::raw::c_int,
    >,
    pub getExpressionFunctionPointer: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut st_WolframLibraryData,
            arg2: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_void,
    >,
    pub evaluateFunctionExpression: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut st_WolframLibraryData,
            arg2: *mut ::std::os::raw::c_void,
            arg3: mint,
            arg4: mint,
            arg5: mint,
            arg6: *mut ::std::os::raw::c_int,
            arg7: *mut *mut ::std::os::raw::c_void,
            arg8: ::std::os::raw::c_int,
            arg9: mint,
            arg10: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub getArgumentSpace: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut st_WolframLibraryData,
            arg2: mint,
        ) -> *mut *mut ::std::os::raw::c_void,
    >,
    pub getLibraryFunctionPointer: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
        ) -> LibraryFunctionPointer,
    >,
    pub getFunctionCallPointer: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
        ) -> LibraryFunctionPointer,
    >,
    pub checkFloatingPointException: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_uint,
        ) -> mbool,
    >,
    pub getRankZeroMTensor: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: mint,
        ) -> MTensor,
    >,
    pub MTensor_fillFromMTensor: ::std::option::Option<
        unsafe extern "C" fn(arg1: MTensor, arg2: *mut MTensor) -> ::std::os::raw::c_int,
    >,
}
#[test]
fn bindgen_test_layout_st_WolframCompileLibrary_Functions() {
    assert_eq!(
        ::std::mem::size_of::<st_WolframCompileLibrary_Functions>(),
        224usize,
        concat!("Size of: ", stringify!(st_WolframCompileLibrary_Functions))
    );
    assert_eq!(
        ::std::mem::align_of::<st_WolframCompileLibrary_Functions>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(st_WolframCompileLibrary_Functions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>())).VersionNumber
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(VersionNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>()))
                .GetInitializedMTensors as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(GetInitializedMTensors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>()))
                .ReleaseInitializedMTensors as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(ReleaseInitializedMTensors)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>()))
                .WolframLibraryData_cleanUp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(WolframLibraryData_cleanUp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>())).MTensor_init
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(MTensor_init)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>()))
                .MTensor_allocate as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(MTensor_allocate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>())).MTensor_copy
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(MTensor_copy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>()))
                .MTensor_copyUnique as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(MTensor_copyUnique)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>()))
                .MTensor_insertMTensor as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(MTensor_insertMTensor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>()))
                .MTensor_getMTensorInitialized as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(MTensor_getMTensorInitialized)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>())).MTensor_getPart
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(MTensor_getPart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>())).MTensor_setPart
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(MTensor_setPart)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>()))
                .getUnaryMathFunction as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(getUnaryMathFunction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>())).Math_T_T
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(Math_T_T)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>())).Math_V_V
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(Math_V_V)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>()))
                .getBinaryMathFunction as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(getBinaryMathFunction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>())).Math_TT_T
                as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(Math_TT_T)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>())).Math_VV_V
                as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(Math_VV_V)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>())).Compare_R
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(Compare_R)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>())).Compare_C
                as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(Compare_C)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>()))
                .getExpressionFunctionPointer as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(getExpressionFunctionPointer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>()))
                .evaluateFunctionExpression as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(evaluateFunctionExpression)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>()))
                .getArgumentSpace as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(getArgumentSpace)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>()))
                .getLibraryFunctionPointer as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(getLibraryFunctionPointer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>()))
                .getFunctionCallPointer as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(getFunctionCallPointer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>()))
                .checkFloatingPointException as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(checkFloatingPointException)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>()))
                .getRankZeroMTensor as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(getRankZeroMTensor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframCompileLibrary_Functions>()))
                .MTensor_fillFromMTensor as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframCompileLibrary_Functions),
            "::",
            stringify!(MTensor_fillFromMTensor)
        )
    );
}
pub type WolframCompileLibrary_Functions = *mut st_WolframCompileLibrary_Functions;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_WolframRuntimeData {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_WolframIOLibrary_Functions {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_WolframSparseLibrary_Functions {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_WolframImageLibrary_Functions {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_WolframRawArrayLibrary_Functions {
    pub _address: u8,
}

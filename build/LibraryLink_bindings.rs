/* automatically generated by rust-bindgen */

pub const __DARWIN_ONLY_64_BIT_INO_T: ::std::os::raw::c_uint = 0;
pub const __DARWIN_ONLY_VERS_1050: ::std::os::raw::c_uint = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: ::std::os::raw::c_uint = 1;
pub const __DARWIN_UNIX03: ::std::os::raw::c_uint = 1;
pub const __DARWIN_64_BIT_INO_T: ::std::os::raw::c_uint = 0;
pub const __DARWIN_VERS_1050: ::std::os::raw::c_uint = 0;
pub const __DARWIN_NON_CANCELABLE: ::std::os::raw::c_uint = 0;
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: ::std::os::raw::c_uint = 4096;
pub const __DARWIN_C_FULL: ::std::os::raw::c_uint = 900000;
pub const __DARWIN_C_LEVEL: ::std::os::raw::c_uint = 900000;
pub const __STDC_WANT_LIB_EXT1__: ::std::os::raw::c_uint = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: ::std::os::raw::c_uint = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: ::std::os::raw::c_uint = 3;
pub const __MAC_10_0: ::std::os::raw::c_uint = 1000;
pub const __MAC_10_1: ::std::os::raw::c_uint = 1010;
pub const __MAC_10_2: ::std::os::raw::c_uint = 1020;
pub const __MAC_10_3: ::std::os::raw::c_uint = 1030;
pub const __MAC_10_4: ::std::os::raw::c_uint = 1040;
pub const __MAC_10_5: ::std::os::raw::c_uint = 1050;
pub const __MAC_10_6: ::std::os::raw::c_uint = 1060;
pub const __MAC_10_7: ::std::os::raw::c_uint = 1070;
pub const __MAC_10_8: ::std::os::raw::c_uint = 1080;
pub const __MAC_10_9: ::std::os::raw::c_uint = 1090;
pub const __MAC_10_10: ::std::os::raw::c_uint = 101000;
pub const __MAC_10_10_2: ::std::os::raw::c_uint = 101002;
pub const __MAC_10_10_3: ::std::os::raw::c_uint = 101003;
pub const __MAC_10_11: ::std::os::raw::c_uint = 101100;
pub const __MAC_10_11_2: ::std::os::raw::c_uint = 101102;
pub const __MAC_10_11_3: ::std::os::raw::c_uint = 101103;
pub const __MAC_10_11_4: ::std::os::raw::c_uint = 101104;
pub const __MAC_10_12: ::std::os::raw::c_uint = 101200;
pub const __MAC_10_12_1: ::std::os::raw::c_uint = 101201;
pub const __MAC_10_12_2: ::std::os::raw::c_uint = 101202;
pub const __MAC_10_12_4: ::std::os::raw::c_uint = 101204;
pub const __MAC_10_13: ::std::os::raw::c_uint = 101300;
pub const __MAC_10_13_1: ::std::os::raw::c_uint = 101301;
pub const __MAC_10_13_2: ::std::os::raw::c_uint = 101302;
pub const __IPHONE_2_0: ::std::os::raw::c_uint = 20000;
pub const __IPHONE_2_1: ::std::os::raw::c_uint = 20100;
pub const __IPHONE_2_2: ::std::os::raw::c_uint = 20200;
pub const __IPHONE_3_0: ::std::os::raw::c_uint = 30000;
pub const __IPHONE_3_1: ::std::os::raw::c_uint = 30100;
pub const __IPHONE_3_2: ::std::os::raw::c_uint = 30200;
pub const __IPHONE_4_0: ::std::os::raw::c_uint = 40000;
pub const __IPHONE_4_1: ::std::os::raw::c_uint = 40100;
pub const __IPHONE_4_2: ::std::os::raw::c_uint = 40200;
pub const __IPHONE_4_3: ::std::os::raw::c_uint = 40300;
pub const __IPHONE_5_0: ::std::os::raw::c_uint = 50000;
pub const __IPHONE_5_1: ::std::os::raw::c_uint = 50100;
pub const __IPHONE_6_0: ::std::os::raw::c_uint = 60000;
pub const __IPHONE_6_1: ::std::os::raw::c_uint = 60100;
pub const __IPHONE_7_0: ::std::os::raw::c_uint = 70000;
pub const __IPHONE_7_1: ::std::os::raw::c_uint = 70100;
pub const __IPHONE_8_0: ::std::os::raw::c_uint = 80000;
pub const __IPHONE_8_1: ::std::os::raw::c_uint = 80100;
pub const __IPHONE_8_2: ::std::os::raw::c_uint = 80200;
pub const __IPHONE_8_3: ::std::os::raw::c_uint = 80300;
pub const __IPHONE_8_4: ::std::os::raw::c_uint = 80400;
pub const __IPHONE_9_0: ::std::os::raw::c_uint = 90000;
pub const __IPHONE_9_1: ::std::os::raw::c_uint = 90100;
pub const __IPHONE_9_2: ::std::os::raw::c_uint = 90200;
pub const __IPHONE_9_3: ::std::os::raw::c_uint = 90300;
pub const __IPHONE_10_0: ::std::os::raw::c_uint = 100000;
pub const __IPHONE_10_1: ::std::os::raw::c_uint = 100100;
pub const __IPHONE_10_2: ::std::os::raw::c_uint = 100200;
pub const __IPHONE_10_3: ::std::os::raw::c_uint = 100300;
pub const __IPHONE_11_0: ::std::os::raw::c_uint = 110000;
pub const __IPHONE_11_1: ::std::os::raw::c_uint = 110100;
pub const __IPHONE_11_2: ::std::os::raw::c_uint = 110200;
pub const __TVOS_9_0: ::std::os::raw::c_uint = 90000;
pub const __TVOS_9_1: ::std::os::raw::c_uint = 90100;
pub const __TVOS_9_2: ::std::os::raw::c_uint = 90200;
pub const __TVOS_10_0: ::std::os::raw::c_uint = 100000;
pub const __TVOS_10_0_1: ::std::os::raw::c_uint = 100001;
pub const __TVOS_10_1: ::std::os::raw::c_uint = 100100;
pub const __TVOS_10_2: ::std::os::raw::c_uint = 100200;
pub const __TVOS_11_0: ::std::os::raw::c_uint = 110000;
pub const __TVOS_11_1: ::std::os::raw::c_uint = 110100;
pub const __TVOS_11_2: ::std::os::raw::c_uint = 110200;
pub const __WATCHOS_1_0: ::std::os::raw::c_uint = 10000;
pub const __WATCHOS_2_0: ::std::os::raw::c_uint = 20000;
pub const __WATCHOS_2_1: ::std::os::raw::c_uint = 20100;
pub const __WATCHOS_2_2: ::std::os::raw::c_uint = 20200;
pub const __WATCHOS_3_0: ::std::os::raw::c_uint = 30000;
pub const __WATCHOS_3_1: ::std::os::raw::c_uint = 30100;
pub const __WATCHOS_3_1_1: ::std::os::raw::c_uint = 30101;
pub const __WATCHOS_3_2: ::std::os::raw::c_uint = 30200;
pub const __WATCHOS_4_0: ::std::os::raw::c_uint = 40000;
pub const __WATCHOS_4_1: ::std::os::raw::c_uint = 40100;
pub const __WATCHOS_4_2: ::std::os::raw::c_uint = 40200;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: ::std::os::raw::c_uint = 101302;
pub const _JBLEN: ::std::os::raw::c_uint = 37;
pub const WolframLibraryVersion: ::std::os::raw::c_uint = 4;
pub const True: ::std::os::raw::c_uint = 1;
pub const False: ::std::os::raw::c_uint = 0;
pub const MType_Integer: ::std::os::raw::c_uint = 2;
pub const MType_Real: ::std::os::raw::c_uint = 3;
pub const MType_Complex: ::std::os::raw::c_uint = 4;
pub type jmp_buf = [::std::os::raw::c_int; 37usize];
pub type sigjmp_buf = [::std::os::raw::c_int; 38usize];
extern "C" {
    #[link_name = "\u{1}_setjmp"]
    pub fn setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_longjmp"]
    pub fn longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}__setjmp"]
    pub fn _setjmp(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__longjmp"]
    pub fn _longjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_sigsetjmp"]
    pub fn sigsetjmp(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_siglongjmp"]
    pub fn siglongjmp(arg1: *mut ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_longjmperror"]
    pub fn longjmperror();
}
pub type rsize_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
pub type mint = ::std::os::raw::c_long;
pub type mbool = ::std::os::raw::c_int;
pub type mreal = f64;
pub type type_t = ::std::os::raw::c_int;
pub type UBIT32 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mcomplex {
    pub ri: [mreal; 2usize],
}
#[test]
fn bindgen_test_layout_mcomplex() {
    assert_eq!(
        ::std::mem::size_of::<mcomplex>(),
        16usize,
        concat!("Size of: ", stringify!(mcomplex))
    );
    assert_eq!(
        ::std::mem::align_of::<mcomplex>(),
        8usize,
        concat!("Alignment of ", stringify!(mcomplex))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mcomplex>())).ri as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mcomplex),
            "::",
            stringify!(ri)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_MDataArray {
    _unused: [u8; 0],
}
pub type MTensor = *mut st_MDataArray;
pub type MRawArray = *mut st_MDataArray;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MSparseArray_struct {
    _unused: [u8; 0],
}
pub type MSparseArray = *mut MSparseArray_struct;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IMAGEOBJ_ENTRY {
    _unused: [u8; 0],
}
pub type MImage = *mut IMAGEOBJ_ENTRY;
#[repr(C)]
#[derive(Copy, Clone)]
pub union MArgument {
    pub boolean: *mut mbool,
    pub integer: *mut mint,
    pub real: *mut mreal,
    pub cmplex: *mut mcomplex,
    pub tensor: *mut MTensor,
    pub sparse: *mut MSparseArray,
    pub raw: *mut MRawArray,
    pub image: *mut MImage,
    pub utf8string: *mut *mut ::std::os::raw::c_char,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_MArgument() {
    assert_eq!(
        ::std::mem::size_of::<MArgument>(),
        8usize,
        concat!("Size of: ", stringify!(MArgument))
    );
    assert_eq!(
        ::std::mem::align_of::<MArgument>(),
        8usize,
        concat!("Alignment of ", stringify!(MArgument))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MArgument>())).boolean as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MArgument),
            "::",
            stringify!(boolean)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MArgument>())).integer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MArgument),
            "::",
            stringify!(integer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MArgument>())).real as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MArgument),
            "::",
            stringify!(real)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MArgument>())).cmplex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MArgument),
            "::",
            stringify!(cmplex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MArgument>())).tensor as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MArgument),
            "::",
            stringify!(tensor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MArgument>())).sparse as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MArgument),
            "::",
            stringify!(sparse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MArgument>())).raw as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MArgument),
            "::",
            stringify!(raw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MArgument>())).image as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MArgument),
            "::",
            stringify!(image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MArgument>())).utf8string as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MArgument),
            "::",
            stringify!(utf8string)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MLINK_STRUCT {
    _unused: [u8; 0],
}
pub type MLINK = *mut MLINK_STRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MLENV_STRUCT {
    _unused: [u8; 0],
}
pub type MLENV = *mut MLENV_STRUCT;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_MInputStream {
    _unused: [u8; 0],
}
pub type MInputStream = *mut st_MInputStream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_MOutputStream {
    _unused: [u8; 0],
}
pub type MOutputStream = *mut st_MOutputStream;
pub const LIBRARY_NO_ERROR: _bindgen_ty_1 = 0;
pub const LIBRARY_TYPE_ERROR: _bindgen_ty_1 = 1;
pub const LIBRARY_RANK_ERROR: _bindgen_ty_1 = 2;
pub const LIBRARY_DIMENSION_ERROR: _bindgen_ty_1 = 3;
pub const LIBRARY_NUMERICAL_ERROR: _bindgen_ty_1 = 4;
pub const LIBRARY_MEMORY_ERROR: _bindgen_ty_1 = 5;
pub const LIBRARY_FUNCTION_ERROR: _bindgen_ty_1 = 6;
pub const LIBRARY_VERSION_ERROR: _bindgen_ty_1 = 7;
pub type _bindgen_ty_1 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_DataStore {
    _unused: [u8; 0],
}
pub type DataStore = *mut st_DataStore;
pub type WolframLibraryData = *mut st_WolframLibraryData;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_WolframLibraryData {
    pub UTF8String_disown:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_char)>,
    pub MTensor_new: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: mint,
            arg2: mint,
            arg3: *const mint,
            arg4: *mut MTensor,
        ) -> ::std::os::raw::c_int,
    >,
    pub MTensor_free: ::std::option::Option<unsafe extern "C" fn(arg1: MTensor)>,
    pub MTensor_clone: ::std::option::Option<
        unsafe extern "C" fn(arg1: MTensor, arg2: *mut MTensor) -> ::std::os::raw::c_int,
    >,
    pub MTensor_shareCount:
        ::std::option::Option<unsafe extern "C" fn(arg1: MTensor) -> mint>,
    pub MTensor_disown: ::std::option::Option<unsafe extern "C" fn(arg1: MTensor)>,
    pub MTensor_disownAll: ::std::option::Option<unsafe extern "C" fn(arg1: MTensor)>,
    pub MTensor_setInteger: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: MTensor,
            arg2: *mut mint,
            arg3: mint,
        ) -> ::std::os::raw::c_int,
    >,
    pub MTensor_setReal: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: MTensor,
            arg2: *mut mint,
            arg3: mreal,
        ) -> ::std::os::raw::c_int,
    >,
    pub MTensor_setComplex: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: MTensor,
            arg2: *mut mint,
            arg3: mcomplex,
        ) -> ::std::os::raw::c_int,
    >,
    pub MTensor_setMTensor: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: MTensor,
            arg2: MTensor,
            arg3: *mut mint,
            arg4: mint,
        ) -> ::std::os::raw::c_int,
    >,
    pub MTensor_getInteger: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: MTensor,
            arg2: *mut mint,
            arg3: *mut mint,
        ) -> ::std::os::raw::c_int,
    >,
    pub MTensor_getReal: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: MTensor,
            arg2: *mut mint,
            arg3: *mut mreal,
        ) -> ::std::os::raw::c_int,
    >,
    pub MTensor_getComplex: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: MTensor,
            arg2: *mut mint,
            arg3: *mut mcomplex,
        ) -> ::std::os::raw::c_int,
    >,
    pub MTensor_getMTensor: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: MTensor,
            arg2: *mut mint,
            arg3: mint,
            arg4: *mut MTensor,
        ) -> ::std::os::raw::c_int,
    >,
    pub MTensor_getRank:
        ::std::option::Option<unsafe extern "C" fn(arg1: MTensor) -> mint>,
    pub MTensor_getDimensions:
        ::std::option::Option<unsafe extern "C" fn(arg1: MTensor) -> *const mint>,
    pub MTensor_getType:
        ::std::option::Option<unsafe extern "C" fn(arg1: MTensor) -> mint>,
    pub MTensor_getFlattenedLength:
        ::std::option::Option<unsafe extern "C" fn(arg1: MTensor) -> mint>,
    pub MTensor_getIntegerData:
        ::std::option::Option<unsafe extern "C" fn(arg1: MTensor) -> *mut mint>,
    pub MTensor_getRealData:
        ::std::option::Option<unsafe extern "C" fn(arg1: MTensor) -> *mut mreal>,
    pub MTensor_getComplexData:
        ::std::option::Option<unsafe extern "C" fn(arg1: MTensor) -> *mut mcomplex>,
    pub Message:
        ::std::option::Option<unsafe extern "C" fn(arg1: *const ::std::os::raw::c_char)>,
    pub AbortQ: ::std::option::Option<unsafe extern "C" fn() -> mint>,
    pub getWSLINK:
        ::std::option::Option<unsafe extern "C" fn(arg1: WolframLibraryData) -> MLINK>,
    pub processWSLINK:
        ::std::option::Option<unsafe extern "C" fn(arg1: MLINK) -> ::std::os::raw::c_int>,
    pub evaluateExpression: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: WolframLibraryData,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
            arg4: mint,
            arg5: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub runtimeData: *mut st_WolframRuntimeData,
    pub compileLibraryFunctions: *mut st_WolframCompileLibrary_Functions,
    pub VersionNumber: mint,
    pub registerInputStreamMethod: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            ctor: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: MInputStream,
                    msgHead: *const ::std::os::raw::c_char,
                    optionsIn: *mut ::std::os::raw::c_void,
                ),
            >,
            handlerTest: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                    arg2: *mut ::std::os::raw::c_char,
                ) -> mbool,
            >,
            methodData: *mut ::std::os::raw::c_void,
            destroyMethod: ::std::option::Option<
                unsafe extern "C" fn(methodData: *mut ::std::os::raw::c_void),
            >,
        ) -> mbool,
    >,
    pub unregisterInputStreamMethod: ::std::option::Option<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> mbool,
    >,
    pub registerOutputStreamMethod: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            ctor: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: MOutputStream,
                    msgHead: *const ::std::os::raw::c_char,
                    optionsIn: *mut ::std::os::raw::c_void,
                    appendMode: mbool,
                ),
            >,
            handlerTest: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                    arg2: *mut ::std::os::raw::c_char,
                ) -> mbool,
            >,
            methodData: *mut ::std::os::raw::c_void,
            destroyMethod: ::std::option::Option<
                unsafe extern "C" fn(methodData: *mut ::std::os::raw::c_void),
            >,
        ) -> mbool,
    >,
    pub unregisterOutputStreamMethod: ::std::option::Option<
        unsafe extern "C" fn(name: *const ::std::os::raw::c_char) -> mbool,
    >,
    pub ioLibraryFunctions: *mut st_WolframIOLibrary_Functions,
    pub getWSLINKEnvironment:
        ::std::option::Option<unsafe extern "C" fn(arg1: WolframLibraryData) -> MLENV>,
    pub sparseLibraryFunctions: *mut st_WolframSparseLibrary_Functions,
    pub imageLibraryFunctions: *mut st_WolframImageLibrary_Functions,
    pub registerLibraryExpressionManager: ::std::option::Option<
        unsafe extern "C" fn(
            mname: *const ::std::os::raw::c_char,
            mfun: ::std::option::Option<
                unsafe extern "C" fn(arg1: WolframLibraryData, arg2: mbool, arg3: mint),
            >,
        ) -> ::std::os::raw::c_int,
    >,
    pub unregisterLibraryExpressionManager: ::std::option::Option<
        unsafe extern "C" fn(
            mname: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub releaseManagedLibraryExpression: ::std::option::Option<
        unsafe extern "C" fn(
            mname: *const ::std::os::raw::c_char,
            id: mint,
        ) -> ::std::os::raw::c_int,
    >,
    pub registerLibraryCallbackManager: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
            mfun: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: WolframLibraryData,
                    arg2: mint,
                    arg3: MTensor,
                ) -> mbool,
            >,
        ) -> ::std::os::raw::c_int,
    >,
    pub unregisterLibraryCallbackManager: ::std::option::Option<
        unsafe extern "C" fn(
            name: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub callLibraryCallbackFunction: ::std::option::Option<
        unsafe extern "C" fn(
            id: mint,
            ArgC: mint,
            Args: *mut MArgument,
            Res: MArgument,
        ) -> ::std::os::raw::c_int,
    >,
    pub releaseLibraryCallbackFunction:
        ::std::option::Option<unsafe extern "C" fn(id: mint) -> ::std::os::raw::c_int>,
    pub validatePath: ::std::option::Option<
        unsafe extern "C" fn(
            path: *mut ::std::os::raw::c_char,
            type_: ::std::os::raw::c_char,
        ) -> mbool,
    >,
    pub protectedModeQ: ::std::option::Option<unsafe extern "C" fn() -> mbool>,
    pub rawarrayLibraryFunctions: *mut st_WolframRawArrayLibrary_Functions,
}
#[test]
fn bindgen_test_layout_st_WolframLibraryData() {
    assert_eq!(
        ::std::mem::size_of::<st_WolframLibraryData>(),
        384usize,
        concat!("Size of: ", stringify!(st_WolframLibraryData))
    );
    assert_eq!(
        ::std::mem::align_of::<st_WolframLibraryData>(),
        8usize,
        concat!("Alignment of ", stringify!(st_WolframLibraryData))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).UTF8String_disown
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(UTF8String_disown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_new as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_new)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_free as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_free)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_clone as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_clone)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_shareCount
                as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_shareCount)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_disown as *const _
                as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_disown)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_disownAll
                as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_disownAll)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_setInteger
                as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_setInteger)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_setReal as *const _
                as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_setReal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_setComplex
                as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_setComplex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_setMTensor
                as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_setMTensor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_getInteger
                as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_getInteger)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_getReal as *const _
                as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_getReal)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_getComplex
                as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_getComplex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_getMTensor
                as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_getMTensor)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_getRank as *const _
                as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_getRank)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_getDimensions
                as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_getDimensions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_getType as *const _
                as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_getType)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_getFlattenedLength
                as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_getFlattenedLength)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_getIntegerData
                as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_getIntegerData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_getRealData
                as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_getRealData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).MTensor_getComplexData
                as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(MTensor_getComplexData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).Message as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(Message)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).AbortQ as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(AbortQ)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).getWSLINK as *const _
                as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(getWSLINK)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).processWSLINK as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(processWSLINK)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).evaluateExpression
                as *const _ as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(evaluateExpression)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).runtimeData as *const _
                as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(runtimeData)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).compileLibraryFunctions
                as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(compileLibraryFunctions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).VersionNumber as *const _
                as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(VersionNumber)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).registerInputStreamMethod
                as *const _ as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(registerInputStreamMethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).unregisterInputStreamMethod
                as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(unregisterInputStreamMethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).registerOutputStreamMethod
                as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(registerOutputStreamMethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).unregisterOutputStreamMethod
                as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(unregisterOutputStreamMethod)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).ioLibraryFunctions
                as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(ioLibraryFunctions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).getWSLINKEnvironment
                as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(getWSLINKEnvironment)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).sparseLibraryFunctions
                as *const _ as usize
        },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(sparseLibraryFunctions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).imageLibraryFunctions
                as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(imageLibraryFunctions)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>()))
                .registerLibraryExpressionManager as *const _ as usize
        },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(registerLibraryExpressionManager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>()))
                .unregisterLibraryExpressionManager as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(unregisterLibraryExpressionManager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>()))
                .releaseManagedLibraryExpression as *const _ as usize
        },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(releaseManagedLibraryExpression)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>()))
                .registerLibraryCallbackManager as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(registerLibraryCallbackManager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>()))
                .unregisterLibraryCallbackManager as *const _ as usize
        },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(unregisterLibraryCallbackManager)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).callLibraryCallbackFunction
                as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(callLibraryCallbackFunction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>()))
                .releaseLibraryCallbackFunction as *const _ as usize
        },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(releaseLibraryCallbackFunction)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).validatePath as *const _
                as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(validatePath)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).protectedModeQ as *const _
                as usize
        },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(protectedModeQ)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<st_WolframLibraryData>())).rawarrayLibraryFunctions
                as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(st_WolframLibraryData),
            "::",
            stringify!(rawarrayLibraryFunctions)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_WolframRuntimeData {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_WolframCompileLibrary_Functions {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_WolframIOLibrary_Functions {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_WolframSparseLibrary_Functions {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_WolframImageLibrary_Functions {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct st_WolframRawArrayLibrary_Functions {
    pub _address: u8,
}
